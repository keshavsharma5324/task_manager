// Mocks generated by Mockito 5.4.6 from annotations
// in task_manager/test/controllers/task_controller_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:task_manager/domain/entities/task.dart' as _i5;
import 'package:task_manager/domain/repositories/task_repository.dart' as _i2;
import 'package:task_manager/domain/usecases/task_usecase.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeTaskRepository_0 extends _i1.SmartFake
    implements _i2.TaskRepository {
  _FakeTaskRepository_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [TaskUseCases].
///
/// See the documentation for Mockito's code generation for more information.
class MockTaskUseCases extends _i1.Mock implements _i3.TaskUseCases {
  MockTaskUseCases() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.TaskRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeTaskRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.TaskRepository);

  @override
  _i4.Future<void> addTask(String? title, String? description) =>
      (super.noSuchMethod(
            Invocation.method(#addTask, [title, description]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<List<_i5.Task>> getTasks() =>
      (super.noSuchMethod(
            Invocation.method(#getTasks, []),
            returnValue: _i4.Future<List<_i5.Task>>.value(<_i5.Task>[]),
          )
          as _i4.Future<List<_i5.Task>>);

  @override
  _i4.Future<void> updateTask(_i5.Task? task) =>
      (super.noSuchMethod(
            Invocation.method(#updateTask, [task]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> deleteTask(String? taskId) =>
      (super.noSuchMethod(
            Invocation.method(#deleteTask, [taskId]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> toggleTaskCompletion(_i5.Task? task) =>
      (super.noSuchMethod(
            Invocation.method(#toggleTaskCompletion, [task]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);
}
